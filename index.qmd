---
title: "SCAR Antarctic Biodiversity Portal Activity Dashboard"
format: 
  dashboard:
    scrolling: true 
execute: 
  echo: false
---

```{r setup, include = FALSE}
library(tidyverse)
library(plotly)
library(here)
library(viridis)
library(httr)
library(jsonlite)
library(rgbif)
source(here("R", "helpers.R"))

### DATASETS

# 1. Obtener todas las 'datasetKey' (IDs de datasets) que tienen registros en Ecuador.
# 1. Get all 'datasetKey' (dataset IDs) that have records in Ecuador.
# Usamos occ_search() para buscar en GBIF filtrando por país.
# We use occ_search() to query GBIF filtering by country.
print("Buscando dataset keys para Ecuador...") # Mensaje de depuración / Debug message
ecuador_dataset_keys <- occ_search(
  country = "EC",      # Código ISO de 2 letras para Ecuador / # 2-letter ISO code for Ecuador
  limit = 0,           # No queremos los registros, solo la lista de datasets / # We don't want records, just the dataset list
  facet = "datasetKey",# Agrupar los resultados por dataset / # Group results by dataset
  facetLimit = 10000   # Límite máximo de datasets a recuperar / # Maximum limit of datasets to retrieve
)$facets$datasetKey$name
print(paste("Encontrados", length(ecuador_dataset_keys), "dataset keys para Ecuador.")) # Mensaje de depuración / Debug message

# 2. Iterar sobre cada 'datasetKey' de Ecuador para obtener sus metadatos y fechas.
# 2. Iterate over each Ecuador 'datasetKey' to get its metadata and dates.
# 'map_dfr' crea una única tabla (data frame) combinando los resultados.
# 'map_dfr' creates a single data frame by row-binding the results.
print("Obteniendo metadatos para cada dataset key...") # Mensaje de depuración / Debug message
datasets <- ecuador_dataset_keys %>%
  map_dfr(~{
    current_key <- .x 
    # print(paste("Procesando dataset / Processing dataset:", current_key)) # Descomentar si necesitas depuración detallada
    
    # Intentar obtener metadatos y fechas, manejando posibles errores
    # Try to get metadata and dates, handling potential errors
    tryCatch({
      # A. Obtener metadatos base (tipo, licencia)
      # A. Get base metadata (type, license)
      meta <- rgbif::dataset_get(current_key)
      
      # B. Obtener fechas de creación/modificación (usando la función de R/helpers.R)
      # B. Get created/modified dates (using the function from R/helpers.R)
      date_info <- get_created_modified(current_key) 
      
      # C. Construir una fila (tibble) con toda la información necesaria.
      # C. Build a single row (tibble) with all necessary information.
      tibble(
        dataset_key = meta$data$key,
        type = meta$data$type,
        license = meta$data$license,
        occurrence_records_count = meta$data$occurrenceCount %||% 0,
        created = date_info$created,
        modified = date_info$modified
      )
    }, error = function(e) {
      # Si hay un error obteniendo datos para una key, imprimirlo y devolver NULL para ignorarla
      # If there's an error getting data for a key, print it and return NULL to skip it
      print(paste("Error procesando dataset key", current_key, ":", e$message))
      NULL 
    })
  }) %>%
  # Asegurarse de que las columnas de fecha existan antes de procesarlas
  # Make sure date columns exist before processing them
  filter(!is.null(created) & !is.null(modified)) %>% 
  mutate(
    created_date = as_date(created),
    created_year = year(created_date),
    modified_date = as_date(modified),
    modified_year = year(modified_date)
  )
print("Metadatos obtenidos y fechas procesadas.") # Mensaje de depuración / Debug message
print(paste("Dimensiones finales de la tabla 'datasets':", paste(dim(datasets), collapse = " x "))) # Mensaje de depuración / Debug message

# --- PROCESAMIENTO DE DATOS (Basado en la tabla 'datasets' filtrada para Ecuador) ---
# --- DATA PROCESSING (Based on the 'datasets' table filtered for Ecuador) ---

# Contar datasets por año de creación y tipo
# Count datasets by creation year and type
created_datasets_counts <- datasets %>%
  group_by(created_year, type) %>%
  summarise(count = n(), .groups = "drop")

# Calcular el total acumulativo de datasets por año
# Calculate the cumulative total of datasets per year
cumulative_created_datasets <- created_datasets_counts %>%
  group_by(created_year) %>%
  summarise(yearly_total = sum(count)) %>%
  arrange(created_year) %>%
  mutate(cumulative_total = cumsum(yearly_total))

# Contar datasets por año de modificación y tipo
# Count datasets by modification year and type
modified_datasets_counts <- datasets %>%
  group_by(modified_year, type) %>%
  summarise(count = n(), .groups = "drop")

# Sumar el número de registros (occurrences) por año de creación del dataset
# Sum the number of records (occurrences) by the dataset's creation year
records_per_year <- datasets %>%
  group_by(created_year) %>%
  summarise(total_occurrence_records = sum(occurrence_records_count, na.rm = TRUE)) %>%
  arrange(created_year) %>%
  mutate(cumulative_occ = cumsum(total_occurrence_records))

# Contar el número de datasets por tipo de licencia
# Count the number of datasets by license type
license_counts <- datasets %>%
  count(license, name = "count")

print("Tablas de resumen calculadas.") # Mensaje de depuración / Debug message

### CITATIONS 

# Construir la URL de búsqueda de literatura dinámicamente
# Build the literature search URL dynamically
# Buscamos artículos que citen CUALQUIERA de los datasets encontrados para Ecuador
# We search for articles citing ANY of the datasets found for Ecuador
base_citation_url <- "[https://api.gbif.org/v1/literature/search?gbifDatasetKey=](https://api.gbif.org/v1/literature/search?gbifDatasetKey=)"
# Unimos todas las keys encontradas (si existen) con "&gbifDatasetKey="
# Join all found keys (if they exist) with "&gbifDatasetKey="
if (nrow(datasets) > 0 && "dataset_key" %in% names(datasets)) {
  dataset_keys_param <- paste(datasets$dataset_key, collapse = "&gbifDatasetKey=") 
} else {
  dataset_keys_param <- "" # Si no hay datasets, la búsqueda no tendrá filtro de key
}
# Añadimos el facet por año al final
# Add the year facet at the end
citation_url <- paste0(base_citation_url, dataset_keys_param, "&facet=year")

print(paste("URL de Citaciones:", citation_url)) # Mensaje de depuración / Debug message

# Fetch and parse
response <- GET(citation_url)
stop_for_status(response)
citation_json_data <- content(response, "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE)

# Extract year + count from facets
citation_per_year <- citation_json_data$facets$counts[[1]] %>%
  as_tibble() %>%
  rename(year = name) %>%
  mutate(
    year = as.integer(year),
    count = as.integer(count)
  ) %>%
  arrange(year) %>%  # ensure ascending order for correct cumulative sum
  mutate(cumulative_count = cumsum(count)) 


```

## Row

### Occurrences published

```{r}
#| title: Number of Occurrence Records Published per Year

# Use bright orange for the cumulative curve
cumulative_color <- "#F8760D"

fig <- plot_ly() %>%
  
  # Bar chart: Total Occurrence Records Published per Year
  add_bars(
    data = records_per_year,
    x = ~created_year,
    y = ~total_occurrence_records,
    name = "Records published per year",
    marker = list(color = "#21908CFF")
  ) %>%
  
  # Overlay cumulative curve
  add_lines(
    data = records_per_year,
    x = ~created_year,
    y = ~cumulative_occ,
    name = "Cumulative Total",
    yaxis = "y2",
    line = list(color = cumulative_color, width = 2)
  ) %>%
  
  # Layout for log scale
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(
      title = "Records Published per Year (log)",
      type = "log",
      rangemode = "nonnegative"
    ),
    yaxis2 = list(
      overlaying = "y",
      side = "right",
      type = "log",
      title = list(text = "Cumulative Total Records (log)"),
      rangemode = "nonnegative"
    ),
    margin = list(r = 80),
    legend = list(x = 0.05, y = 0.95)
  )

fig
```

## Row

### Datasets published

```{r}
#| title: Number of Datasets Published per Year

# Get the needed number of colors
n_colors <- length(unique(created_datasets_counts$type))
cb_palette <- viridis(n_colors) 

fig <- plot_ly() %>%
  
  # stacked bars
  add_bars(
    data = created_datasets_counts,
    x = ~created_year,
    y = ~count,
    color = ~type,
    colors = cb_palette,
    name = ~type
  ) %>%
  
  # cumulative line
  add_lines(
    data = cumulative_created_datasets,
    x = ~created_year,
    y = ~cumulative_total,
    name = "Cumulative Total",
    yaxis = "y2",
    line = list(color = "#F8760DFF", width = 2)
  ) %>%
  
  layout(
    barmode = "stack",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Number of Datasets"),
    yaxis2 = list(
      overlaying = "y",
      side = "right",
      title = "Cumulative Total"
    ),
    margin = list(r = 80),
    legend = list(x = 0.02, y = 1)
  )

fig
```

### Dataset Citation per Year

```{r}
#| title: Citations of Our Published Datasets (GBIF) per Year

# Use bright orange for the cumulative curve
cumulative_color <- "#F8760D"

fig <- plot_ly() %>%
  
  # Bar chart: Total Occurrence Records Published per Year
  add_bars(
    data = citation_per_year,
    x = ~year,
    y = ~count,
    name = "Citation Count per year",
    marker = list(color = "#21908CFF")
  ) %>%
  
  # Overlay cumulative curve
  add_lines(
    data = citation_per_year,
    x = ~year,
    y = ~cumulative_count,
    name = "Cumulative Citation Count",
    yaxis = "y2",
    line = list(color = cumulative_color, width = 2)
  ) %>%
  
  # Layout for log scale
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(
      title = "Citation Count per year",
      rangemode = "nonnegative"
    ),
    yaxis2 = list(
      overlaying = "y",
      side = "right",
      title = list(text = "Cumulative Citation Count"),
      rangemode = "nonnegative"
    ),
    margin = list(r = 80),
    legend = list(x = 0.05, y = 0.95)
  )

fig
```

## Row

### License type

```{r}
#| title: Distribution of Dataset Licenses

# Get the needed number of colors
n_colors <- length(unique(license_counts$license))
cb_palette <- viridis(n_colors) 

# Create pie chart
plot_ly(
  license_counts,
  labels = ~license,
  values = ~count,
  type = "pie",
  hole = 0.4,
  marker = list(colors = cb_palette)
)
```

### Datasets updated

```{r}
#| title: Number of Datasets Updated per Year (Stacked by Type)

# Get the needed number of colors
n_colors <- length(unique(modified_datasets_counts$type))
cb_palette <- viridis(n_colors) 

plot_ly(
  modified_datasets_counts,
  x = ~modified_year,
  y = ~count,
  color = ~type,
  colors = cb_palette,
  type = "bar"
) %>%
  layout(
    barmode = "stack",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Number of Datasets"),
    legend = list(x = 0.02, y = 1)
  )
```
