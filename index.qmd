---
# Título del dashboard
title: "Tendencias de Ocurrencias de Biodiversidad - Ecuador"
format:
  dashboard:
    scrolling: true
execute:
  echo: false
---

```{r setup, include = FALSE}
# --- BLOQUE DE CONFIGURACIÓN ---
library(tidyverse)
library(plotly)
library(here)
library(viridis) # Para colores
library(httr)
library(jsonlite)
library(rgbif)
library(lubridate)

# --- OCURRENCIAS POR AÑO DE EVENTO (API GBIF) ---
print("Buscando conteos de ocurrencias por AÑO DE EVENTO para Ecuador...")
occurrence_counts_by_event_year <- occ_search(
  country = "EC",
  facet = "year",
  facetLimit = 200, # Aumentado por si acaso
  limit = 0
)$facets$year$counts %>%
  as_tibble() %>%
  rename(year = name, count_event = count) %>%
  mutate(
    year = as.integer(year),
    count_event = as.integer(count_event)
  ) %>%
  filter(year >= 1950, year <= year(today())) %>%
  arrange(year) %>%
  mutate(cumulative_event = cumsum(count_event))

print("Conteos por año de evento obtenidos.")

# --- OCURRENCIAS PUBLICADAS POR AÑO (Procesando Snapshots del CSV) ---
print("Descargando y procesando CSV de snapshots...")
published_by_year_url <- "[https://analytics-files.gbif.org/country/EC/publishedBy/csv/occ.csv](https://analytics-files.gbif.org/country/EC/publishedBy/csv/occ.csv)"
tryCatch({

  # Lee el CSV
  raw_snapshots <- read_csv(published_by_year_url)

  # ---- NOMBRES DE COLUMNA CORREGIDOS ----
  snapshot_date_col <- "snapshot"         # <-- Nombre correcto
  snapshot_count_col <- "occurrenceCount" # <-- Nombre correcto
  # --------------------------------------

  # Procesa los snapshots para obtener cuentas anuales
  occ_published_snapshots <- raw_snapshots %>%
    select(snapshot_date = all_of(snapshot_date_col), total_count = all_of(snapshot_count_col)) %>%
    mutate(snapshot_date = ymd(snapshot_date)) %>% # Asume formato AAAA-MM-DD
    arrange(snapshot_date) %>% # Ordena por fecha
    mutate(published_since_last = total_count - lag(total_count, default = 0)) %>%
    mutate(publishing_year = year(snapshot_date)) %>%
    filter(publishing_year >= 1950, publishing_year <= year(today())) # Filtrar años

  # Agrupa por año para obtener el total publicado ESE año
  occ_published_by_year <- occ_published_snapshots %>%
    group_by(publishing_year) %>%
    summarise(count_published = sum(published_since_last, na.rm = TRUE), .groups = 'drop') %>%
    arrange(publishing_year) %>%
    mutate(cumulative_published = cumsum(count_published)) # Calcula el acumulado final

  print("CSV de snapshots procesado para obtener cuentas anuales.")
  print(paste("Dim 'occ_published_by_year':", paste(dim(occ_published_by_year), collapse = " x ")))

}, error = function(e) {
  print(paste("Error descargando o procesando el CSV de snapshots:", e$message))
  occ_published_by_year <- tibble(publishing_year = integer(), count_published = integer(), cumulative_published = integer())
})

# --- UNIR AMBAS SERIES DE DATOS ---
# Renombramos 'publishing_year' a 'year' para unir
occ_published_by_year <- occ_published_by_year %>% rename(year = publishing_year)

combined_trends <- full_join(
    occurrence_counts_by_event_year,
    occ_published_by_year,
    by = "year"
  ) %>%
  # Rellenar NAs con 0 y recalcular acumulados de forma segura
  arrange(year) %>%
  mutate(
    count_event = replace_na(count_event, 0),
    count_published = replace_na(count_published, 0),
    cumulative_event = cumsum(count_event),
    cumulative_published = cumsum(count_published)
  )

print("Tendencias combinadas.")
print(paste("Dim 'combined_trends':", paste(dim(combined_trends), collapse = " x ")))

#| title: Tendencias Anuales: Registros Colectados vs. Publicados en GBIF
# Gráfico combinado con dos líneas superpuestas.

# Definir colores distintos
color_event <- "#21908CFF" # Verde azulado para colecta/observación
color_published <- "#F8760D" # Naranja para publicación

fig_combined <- plot_ly(data = combined_trends, x = ~year) %>%

  # Línea 1: Registros por año de evento (colecta/observación)
  add_lines(
    y = ~cumulative_event,
    name = "Total Acumulado (Año de Evento)",
    line = list(color = color_event, width = 2),
    # Texto que aparece al pasar el ratón
    hovertemplate = paste(
        '<b>Año Evento:</b> %{x}<br>',
        'Total Acumulado: %{y:.0f}<br>',
        'Registros ese año: %{customdata[0]:.0f}<extra></extra>'
    ),
    customdata = ~matrix(c(count_event), ncol=1) # Añadir cuenta anual al hover
  ) %>%

  # Línea 2: Registros publicados en GBIF por año
  add_lines(
    y = ~cumulative_published,
    name = "Total Acumulado (Año Publicación GBIF)",
    line = list(color = color_published, width = 2, dash = 'dash'), # Línea discontinua para diferenciar
    # Texto que aparece al pasar el ratón
    hovertemplate = paste(
        '<b>Año Publicación:</b> %{x}<br>',
        'Total Acumulado: %{y:.0f}<br>',
        'Registros ese año: %{customdata[0]:.0f}<extra></extra>'
    ),
    customdata = ~matrix(c(count_published), ncol=1) # Añadir cuenta anual al hover
  ) %>%

  # Configuración general y de ejes
  layout(
    title = "Crecimiento Acumulado de Registros de Ecuador en GBIF",
    xaxis = list(title = "Año"),
    yaxis = list(
      title = "Número Acumulado de Registros (Escala Log)",
      type = "log", # Escala logarítmica
      rangemode = "tozero" # Empezar eje Y cerca de 0 (o 1 en log)
    ),
    hovermode = "x unified", # Muestra info de ambas líneas al pasar por un año
    legend = list(
        orientation = "h", # Leyenda horizontal
        xanchor = "center", # Centrar leyenda
        x = 0.5,           # Posición X centrada
        y = -0.15          # Posición Y debajo del gráfico
    )
  )

# Mostrar el gráfico solo si hay datos
if(nrow(combined_trends) > 0) {
  fig_combined
} else {
  print("No hay datos combinados para graficar.")
}

